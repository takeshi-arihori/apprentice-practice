# ============= [学習力][Level1] 続的に学習時間を確保できる =============
# 平日 : 4H
# 休日 : 8H

# ============= [実装力][Level1] コードを手元で動かすことができる =============

# コードを手元で動かすことができる
# 1. コードを手元で実行する
# 好きな数値を入力でき、その数値を2倍にして表示するプログラムを作成してください。以下の手順に従ってください。

# ファイルを作成し、実行してください。その際に、何らかの値を出力する処理を書いて実行すると、ちゃんと実行できているかを確かめることができます
# プログラムがユーザーに好きな数値を尋ねるようにしてください。この処理を書いたらプログラムを実行し、正しく動作しているか確認してください
# 数値を2倍にして表示する処理を書いてください。この処理を書いたらプログラムを実行し、正しく動作しているか確認してください
# 以下は、プログラムがどのように動作すべきかを示すサンプル出力です。

# def output(num)
#   puts "2倍の数値です:#{num*2}"
# end

# output(5)

# ============= [Ruby][Level1] メソッドを自作し使うことができる =============
# メソッドを自作し使うことができる
# 1. Hello World
# "Hello World" と標準出力（画面）に出力する関数 hello を定義してください。

# def hello
#   puts "Hello World"
# end
# hello()



# 2. 挨拶
# 名前を引数に受け取り、与えられた名前の挨拶メッセージを標準出力（画面）に出力する greeting という関数を書きなさい。

# def greeting(name)
#   puts "おはよう、#{name}"
# end

# greeting("渡辺")


# ============= [Ruby][Level1] 変数を宣言し代入することができる =============

# 変数を宣言し代入することができる
# 1. 三角形の面積
# 底辺が x cm、高さが y cmの三角形の面積を出力する関数 area を定義してください。

# def area(x, y)
#   puts x * y / 2
# end

# area(5, 4)


# ============= [Ruby][Level1] 条件分岐を使うことができる =============


# 条件分岐を使うことができる
# 1. 比較
# 2つの整数 x, y の大小を比較し、xとyの大小関係を出力する関数 greater を定義してください。

# ▼インプット

# x：整数
# y：整数

# -100 <= x, y <= 100
# ▼アウトプット

# xよりyが大きければ「x > y」 xよりyが小さければ「x < y」 xとyの値が同じなら「x == y」

# ▼サンプル呼び出し

# ▼サンプルアウトプット

# x > y
# x < y
# x == y
# ▼回答例_Ruby

# def greater(x, y)
#   if x > y
#     puts "x > y"
#   elsif x == y
#     puts "x == y"
#   else
#     puts "x < y"
#   end
# end

# greater(5, 4)
# greater(-50, -40)
# greater(10, 10)


# 2. 電車の料金
# 東京駅から新宿駅までJR山手線に乗って移動します。12歳以上は大人料金で200円、6歳以上12歳未満はこども料金で100円、6歳未満は幼児で無料となります。
# 年齢に応じて東京駅から新宿駅までの料金を出力する関数 train_fare を定義してください。


# def train_fare(age)
#   puts age >= 12 ? 200 : age >= 6 ? 100 : 0
# end

# train_fare(12)
# train_fare(6)
# train_fare(5)


# 3. XOR
# 2つのブーリアン値 x と y が与えられ、x と y のうちどちらかが真なら true を出力し、両方真もしくは両方偽なら false を出力する関数 xor を定義してください。

# ▼インプット

# x：ブーリアン値
# y：ブーリアン値
# ▼アウトプット

# trueもしくはfalseを出力してください。

# ▼サンプル呼び出し

# ▼サンプルアウトプット

# false
# true
# true
# false
# ▼回答例_Ruby

# def xor(x, y)
#   if x == y
#     puts false
#   else
#     puts true
#   end
# end

# xor(true, true)
# xor(true, false)
# xor(false, true)
# xor(false, false)




# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ここからスタート <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# ============= [Ruby][Level1] 繰り返し処理を行うことができる =============

# 繰り返し処理
# 1. 挨拶
# 100回 "こんにちは！" と出力する関数 hello を定義してください。

# ▼インプット

# 入力はありません。

# ▼アウトプット

# "こんにちは！" という文字列を100行出力してください。

# ▼サンプル呼び出し

# hello()
# ▼サンプルアウトプット

# こんにちは！
# こんにちは！
# ...
# こんにちは！
# ▼回答例_Ruby

# def hello
#   # 関数を完成させてください
# end
# 2. 羊
# あなたは眠れなくなったので羊の数を数えることにしました。羊の数 n が与えられ

# 羊が1匹 羊が2匹 羊が3匹 ...

# と、n 回羊の数えを出力する関数 sheep を定義してください。

# ▼インプット

# n：整数

# 1 <= n <= 100
# ▼アウトプット

# "羊がn匹"と出力してください。

# ▼サンプル呼び出し

# sheep(3)
# ▼サンプルアウトプット

# 羊が1匹
# 羊が2匹
# 羊が3匹
# ▼回答例_Ruby

# def sheep(n)
#   # 関数を完成させてください
# end
# 3. 総和
# 1 から 100 までの足し算の結果を出力する関数 sum_1_100 を定義してください。

# ▼インプット

# 入力はありません。

# ▼アウトプット

# 1 から 100 までの足し算の結果を出力してください。

# ▼サンプル呼び出し

# sum_1_100()
# ▼サンプルアウトプット

# 5050
# ▼回答例_Ruby

# def sum_1_100
#   # 関数を完成させてください
# end
# 4. 総和
# 2つの整数 x と y が与えられ、x から y までの足し算の結果を出力する関数 sum を定義してください。

# ▼インプット

# x：整数
# y：整数

# 1 <= x, y <= 100
# ▼アウトプット

# x から y までの足し算の結果を出力してください。

# ▼サンプル呼び出し

# sum(10, 80)
# ▼サンプルアウトプット

# 3195
# ▼回答例_Ruby

# def sum(x, y)
#   # 関数を完成させてください
# end
# 5. フィボナッチ数列(advanced)
# 家のお手伝いを毎日継続すると、継続日数 n 日に応じて、その日にもらえるお小遣いの金額が増えていきます。お小遣いの金額は以下の条件に従ってもらうことができます。

# f(0) = 0 円 f(1) = 1 円 f(n) = f(n-1) + f(n-2) 円 (n ≧ 2)

# 整数 n に対して、n 日間お手伝いを継続した時のお小遣いの金額を算出する関数 fibonacci を定義してください。

# ▼インプット

# n：整数

# 1 <= n <= 30
# ▼アウトプット

# お小遣いの金額を出力してください。

# ▼サンプル呼び出し

# fibonacci(0)
# fibonacci(1)
# fibonacci(2)
# fibonacci(3)
# fibonacci(4)
# fibonacci(7)
# fibonacci(30)
# ▼サンプルアウトプット

# 0
# 1
# 1
# 2
# 3
# 13
# 832040
# ▼回答例_Ruby

# def fibonacci(n)
#   # 関数を完成させてください
# end



# ============= [Ruby][Level2] ブロックを使った配列の処理ができる(advanced) =============

# ブロックを使った配列の処理ができる
# 1. each
# 従業員の名前がID順に配列で渡されるので、IDと従業員の名前をセットにして出力する print_names 関数を定義してください。なお、each メソッドと with_index メソッドを使うようにしてください。

# ▼インプット

# [name1, name2, name3, ...]：配列

# name：文字列
# ▼アウトプット

# IDと従業員の名前をセットにして順に出力してください。

# ▼サンプル呼び出し

# print_names(['上田', '田仲', '堀田'])
# ▼サンプルアウトプット

# 1. 上田
# 2. 田仲
# 3. 堀田
# ▼回答例_Ruby

# def print_names(names)
#   # 関数を完成させてください
# end
# 2. map
# 与えられた整数の配列の要素を2乗した配列を返す square 関数を定義してください。なお、map メソッドを使うようにしてください。

# ▼インプット

# [i1, i2, i3, ...]：配列

# i：整数
# ▼アウトプット

# 整数を2乗した配列。

# ▼サンプル呼び出し

# squared_numbers = square([5, 7, 10])
# print squared_numbers
# ▼サンプルアウトプット

# [25, 49, 100]
# ▼回答例_Ruby

# def square(numbers)
#   # 関数を完成させてください
# end
# 3. select
# 整数の配列から偶数を抽出した配列を返す関数 select_even_numbers を作成してください。なお、select メソッドを使うようにしてください。

# ▼インプット

# [i1, i2, i3, ...]：配列

# i：整数
# ▼アウトプット

# 偶数を抽出した配列。

# ▼サンプル呼び出し

# even_numbers = select_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
# print even_numbers
# ▼サンプルアウトプット

# [2, 4, 6, 8, 10]
# ▼回答例_Ruby

# def select_even_numbers(numbers)
#   # 関数を完成させてください
# end


# ============= [Ruby][Level2] ハッシュを使うことができる(advanced) =============

# ハッシュを使うことができる
# 1. ハッシュ
# ハッシュと配列の違いについて、

# ハッシュと配列は何が違うのか
# ハッシュと配列はそれぞれどのような用途に向いているのか
# をプログラミング初心者にわかるように説明してください。

# 2. 首都
# 国名と首都名が組み合わせになったハッシュに対して、"#{国名}の首都は#{首都名}です"と出力する関数 print_capitals を作成してください。

# ▼インプット

# { country1 => capital1, country2 => capital2, ...}：ハッシュ

# country：文字列
# capital：文字列
# ▼アウトプット

# "#{国名}の首都は#{首都名}です"と順に出力してください。

# ▼サンプル呼び出し

# print_capitals({ '日本' => '東京', 'アメリカ' => 'ワシントンD.C.' })
# ▼サンプルアウトプット

# 日本の首都は東京です
# アメリカの首都はワシントンD.C.です
# ▼回答例_Ruby

# def print_capitals(capitals)
#   # 関数を完成させてください
# end


# ============= [Ruby][Level2] シンボルを使うことができる(advanced) =============
# ============= [オブジェクト指向][Level2] オブジェクト指向が何かを説明できる =============
# ============= [オブジェクト指向][Level2] オブジェクト指向を使うことができる =============
# ============= [Ruby][Level2] モジュールを説明できる(advanced) =============
# ============= [Ruby][Level2] 例外処理を使うことができる =============
# ============= [Ruby][Level2] 外部ライブラリを使うことができる(advanced) =============
# ============= [Ruby][Level2] デバッガを活用してデバッグができる(advanced) =============
# ============= [Ruby][Level2] 静的解析ツールを使うことができる(advanced) =============
